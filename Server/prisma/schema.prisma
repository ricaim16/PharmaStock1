generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  MANAGER
  EMPLOYEE
}

enum Status {
  ACTIVE
  INACTIVE
}

enum Gender {
  MALE
  FEMALE
}

enum PaymentStatus {
  UNPAID
  PARTIALLY_PAID
  PAID
}

enum PaymentMethod {  
  NONE    // Added NONE as an explicit option
  CASH
  CBE
  COOP
  AWASH
  EBIRR
}

// Users table
model Users {
  id        String           @id @default(uuid())
  FirstName String
  LastName  String
  username  String           @unique
  password  String
  role      Role
  status    Status           @default(ACTIVE)
  member    Members?
  credits   SupplierCredits[] @relation
}

// Members table
model Members {
  id           String   @id @default(uuid())
  user_id      String   @unique
  FirstName    String
  LastName     String
  phone        String?
  position     String
  address      String?
  certificate  String?
  photo        String?
  gender       Gender?
  dob          DateTime?
  salary       Float
  joining_date DateTime
  status       Status   @default(ACTIVE)
  role         Role
  biography    String?
  user         Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

// Suppliers table
model Suppliers {
  id                String            @id @default(uuid())
  supplier_name     String
  contact_info      String
  payment_info_cbe  String?
  payment_info_coop String?
  payment_info_boa  String?
  payment_info_awash String?
  payment_info_ebirr String?
  location          String
  email             String?
  photo             String?
  SupplierCredits   SupplierCredits[]
  Medicines         Medicines[]
}

// Categories Table
model Categories {
  id         Int       @id @default(autoincrement())
  name       String
  Medicines  Medicines[]
}

// DosageForms Table
model DosageForms {
  id         Int       @id @default(autoincrement())
  name       String
  Medicines  Medicines[]
  Sales      Sales[]
  Returns    Returns[]
}

// Medicines Table
model Medicines {
  id                     String         @id @default(uuid())
  medicine_name          String
  brand_name             String
  batch_number           String
  category_id            Int
  dosage_form_id         Int
  medicine_weight        Float
  quantity               Int
  supplier_id            String
  invoice_number         String
  unit_price             Float
  sell_price             Float
  total_price            Float
  expire_date            DateTime
  required_prescription  Boolean
  payment_method         PaymentMethod? // Made optional with ?
  Payment_file           String?
  details                String?
  category               Categories     @relation(fields: [category_id], references: [id])
  dosage_form            DosageForms    @relation(fields: [dosage_form_id], references: [id])
  supplier               Suppliers      @relation(fields: [supplier_id], references: [id])
  Sales                  Sales[]
  Returns                Returns[]
}

// Sales Table
model Sales {
  id                     Int            @id @default(autoincrement())
  product_name           String
  product_batch_number   String
  Quantity               Int
  price                  Float
  total_amount           Float
  payment_method         PaymentMethod? // Made optional with ?
  prescription           Boolean
  dosage_form_id         Int
  customer_id            Int
  sealed_date            DateTime
  medicine_id            String
  dosage_form            DosageForms    @relation(fields: [dosage_form_id], references: [id])
  customer               Customers      @relation(fields: [customer_id], references: [id])
  medicine               Medicines      @relation(fields: [medicine_id], references: [id])
}

// Expenses Table
model Expenses {
  id              Int            @id @default(autoincrement())
  date            DateTime
  reason          String
  payment_method  PaymentMethod? // Made optional with ?
  receipt         String?
  amount          Float
  description     String?
  additional_info String?
}

// Returns Table
model Returns {
  id                   Int         @id @default(autoincrement())
  product_name         String
  product_batch_number String
  dosage_form_id       Int
  return_date          DateTime
  reason_for_return    String
  quantity             Int
  medicine_id          String
  dosage_form          DosageForms @relation(fields: [dosage_form_id], references: [id])
  medicine             Medicines   @relation(fields: [medicine_id], references: [id])
}

// Customers Table
model Customers {
  id               Int       @id @default(autoincrement())
  name             String
  phone            String
  address          String
  status           String
  Sales            Sales[]
  CustomerCredit   CustomerCredit[]
}

// SupplierCredits Table
model SupplierCredits {
  id                String         @id @default(uuid())
  supplier_id       String
  credit_amount     Float
  paid_amount       Float          @default(0)
  description       String?
  payment_method    PaymentMethod? // Made optional with ?
  payment_status    PaymentStatus  @default(UNPAID)
  credit_date       DateTime
  payment_file      String?
  created_by        String
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  supplier          Suppliers      @relation(fields: [supplier_id], references: [id])
  user              Users          @relation(fields: [created_by], references: [id])
}

// CustomerCredit Table
model CustomerCredit {
  id               Int       @id @default(autoincrement())
  customer_id      Int
  credit_amount    Float
  description      String?
  status           String
  credit_date      DateTime
  payment_file     String?
  customer         Customers @relation(fields: [customer_id], references: [id])
}

// Objectives Table
model Objectives {
  id            Int        @id @default(autoincrement())
  title         String
  description   String
  time_period   String
  progress      Float
  KeyResults    KeyResults[]
}

// KeyResults Table
model KeyResults {
  id            Int        @id @default(autoincrement())
  objective_id  Int
  title         String
  description   String
  weight        Float
  deadline      DateTime
  progress      Float
  objective     Objectives @relation(fields: [objective_id], references: [id])
}